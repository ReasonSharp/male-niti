#!/bin/bash

export NGINX_VERSION=1.23.3
export CERTBOT_VERSION=latest
export NODE_VERSION=18.13.0-alpine3.16
export MBAPP_VERSION=latest
export MARIADB_VERSION=10.9.3
export MAILSERVER_VERSION=11.3.1
export PHP_VERSION=8.2.2-fpm-alpine3.17

# Submodules
export SUBMODULES_FOLDER="./subs"

# DBUpdater
export DBUPDATER_COMMIT="1278320"
export DBUPDATER_REPO="git@github.com:maleniti/dbupdater.git"
export DBUPDATER_FOLDER="dbupdater"
export DBUPDATER_BRANCH=master

# MB-APP
export MBAPP_COMMIT=91cafa8
export MBAPP_REPO="git@github.com:ReasonSharp/malablagajna-web.git"
export MBAPP_FOLDER="malablagajna-web"
export MBAPP_BRANCH=main

# WWW
export WWW_COMMIT=48dbeac
export WWW_REPO="git@github.com:ReasonSharp/male-niti-web.git"
export WWW_FOLDER="male-niti-web"
export WWW_BRANCH=main

# BlagajnaDB
export BLAGAJNADB_COMMIT=d2c1f32
export BLAGAJNADB_REPO="git@github.com:ReasonSharp/malablagajna.db.git"
export BLAGAJNADB_FOLDER="malablagajna.db"
export BLAGAJNADB_BRANCH=main

verify-env() {
 [ -z "${1}" ] || [ ! "${1}" = "dev" ] && [ ! "${1}" = "test" ] && [ ! "${1}" = "stage" ] && [ ! "${1}" = "prod" ]
}
fn-exists() {
 declare -F "${1}" > /dev/null
}
ccd() {
 if [ ! -z "${1}" ]; then
  mkdir -p "${1}"
  cd "${1}"
 fi
}

unset ENV
export MSYS_NO_PATHCONV=1

[[ -f "./env.sh"      ]]                       && source "./env.sh"
[[ -z ${ENV} ]] && [ "${1}" != "prepare-env" ] && echo "${0}: missing or invalid env.sh; run: '${0} prepare-env { dev | test | stage | prod }'" && exit 1
[[ -f "./env-${ENV}.sh" ]]                     && source "./env-${ENV}.sh"

prepare-env() {
 if verify-env "${1}"; then
  echo "usage: '${0} prepare-env { dev | test | stage | prod }"
  exit 1
 fi
 envsubst < "./env.template" > "./env-${1}.sh"
 printf "%s\n" "#!/bin/bash" "" "export ENV=${1}" > "./env.sh"
 echo "${0}: check file './env-${1}.sh', then run '${0} write-configs'"
}
write-configs() {
 mkdir -p "./files/blagajnadb/mariadb"
 mkdir -p "./files/blagajnadb/data"
 cp "./config/blagajnadb/my.cnf" "./files/blagajnadb/mariadb/my.cnf"
 echo "${BLAGAJNADB_ROOT_PASS}" > "./config/blagajnadb/mysql-root-pass-${ENV}.txt"
 envsubst '${APP_SERVER_NAME},${WEB_SERVER_NAME}' < "./config/tlsoffloader/tlsoffloader.conf" > "./config/tlsoffloader/tlsoffloader-${ENV}.conf"
 envsubst '${PHP_VERSION}'                        < "./sources/php.sample.Dockerfile"         > "./sources/php.Dockerfile"
 envsubst                                         < "./config/php/smtp.php"                   > "./config/php/smtp-${ENV}.php"
}

preserve-image() {
 if [ "${1}" = "img_certbot" ]; then
  if [ "${ENV}" = "prod" ]; then
   certbot-run
  fi
 else
  docker run -d --name ${1} ${2} //bin/sh -c "while true; do sleep 1; done"
 fi
}
preserve-images() {
 preserve-image img_nginx nginx:${NGINX_VERSION}
 preserve-image img_certbot certbot/dns-google:${CERTBOT_VERSION}
 preserve-image img_node node:${NODE_VERSION}
 preserve-image img_mbapp mbapp:${MBAPP_VERSION}
 preserve-image img_mariadb mariadb:${MARIADB_VERSION}
 preserve-image img_mailserver docker.io/mailserver/docker-mailserver:${MAILSERVER_VERSION}
 preserve-image img_php php:${PHP_VERSION}
}
release-images() {
 docker stop $(docker ps --format '{{.Names}}' | grep img_)
 docker rm $(docker ps -a --format '{{.Names}}' | grep img_)
}

### CONTAINER MANIPULATION ###

blagajnadb() {
 if fn-exists blagajnadb-"${1}"; then
  blagajnadb-"${1}" "${2}"
 else
  echo
  echo "usage: ${0} blagajnadb [param]"
  echo
  echo "PARAMS:"
  echo
  echo " --------------------------------------------------------------------------------------------------"
  echo "  upgrade [VER]   | runs the new upgrade scripts to upgrade the database to [VER] (max by default)"
  echo "  downgrade [VER] | runs the downgrade script to downgrade the database to [VER] (default: cur-1)"
  echo "  login           | logs into the database on the cli"
  echo " --------------------------------------------------------------------------------------------------"
  echo
 fi
}
blagajnadb-login() {
 DB_NAME=`docker ps --format "{{.Names}}" | grep blagajnadb`
 docker exec -it ${DB_NAME} mysql -u root -p"${DB_ROOT_PASS}" malablagajna
}
blagajnadb-upgrade() {
 if [[ -z "${1}" ]]; then UPGRADE=--full; else UPGRADE="--ver ${1}"; fi
 docker run --rm -v `pwd`/sources/blagajnadb:/blagajnadb:ro --network mb-platform_mb-platform $(docker build -f scripts/dbupdater.Dockerfile -q ./scripts) \
  dbupgrade /blagajnadb --demo ${UPGRADE} -h blagajnadb --port=3306 -u root -p"${BLAGAJNADB_ROOT_PASS}" malablagajna
}
blagajnadb-downgrade() {
 if [[ -z "${1}" ]]; then unset DOWNGRADE; else DOWNGRADE="--ver ${1}"; fi
 docker run --rm -v `pwd`/sources/blagajnadb:/blagajnadb:ro --network mb-platform_mb-platform $(docker build -f scripts/dbupdater.Dockerfile -q ./scripts) \
  dbdowngrade /blagajnadb ${DOWNGRADE} -h blagajnadb --port=3306 -u root -p"${BLAGAJNADB_ROOT_PASS}" malablagajna
}

mailserver() {
 if [ "${ENV}" != "prod" ]; then
  echo "${0}: can only execute mailserver in production environment"
  exit 1
 fi
 ./config/mailserver/setup.sh ${@}
}

infra() {
 if fn-exists infra-"${1}"; then
  infra-"${1}" "${2}"
 else
  echo
  echo "usage: ${0} infra [param]"
  echo
  echo "PARAMS:"
  echo
  echo " --------------------------------------------------------------------------------------------------"
  echo "  run                      | creates and runs infrastructure containers"
  echo "  logs [LINES] [CONTAINER] | shows last [LINES] lines of [CONTAINER]'s logs, or all by default"
  echo "  stop                     | stops and removes infrastructure containers"
  echo "  recreate                 | stops and removes infrastructure containers, then runs them anew"
  echo " --------------------------------------------------------------------------------------------------"
  echo
 fi
}
infra-run() {
 docker compose -p mb-platform -f docker-compose-infra.yml up -d
}
infra-logs() {
 if [[ -z "${1}" ]]; then LINES=all; else LINES="${1}"; fi
 if [[ ! -z "${2}" ]]; then CONTAINER="${2}"; fi
 docker compose -p mb-platform -f docker-compose-infra.yml logs -f -t --tail "${LINES}" ${CONTAINER}
}
infra-stop() {
 docker compose -p mb-platform -f docker-compose-infra.yml down
}
infra-recreate() {
 infra-stop
 infra-run
}

app() {
 if fn-exists app-"${1}"; then
  app-"${1}" "${2}"
 else
  echo
  echo "usage: ${0} app [param]"
  echo
  echo "PARAMS:"
  echo
  echo " --------------------------------------------------------------------------------------------------"
  echo "  build           | builds the mbapp web app"
  echo "  run             | creates and runs the mbapp container"
  echo "  logs [LINES]    | shows last [LINES] lines of container's logs, or all by default"
  echo "  stop            | stops and removes the container"
  echo "  rm              | removes the app container"
  echo "  rmi             | removes the app image"
  echo "  recreate        | stops and removes the container, then runs it anew"
  echo " --------------------------------------------------------------------------------------------------"
  echo
 fi
}
app-build() {
 ccd "${SUBMODULES_FOLDER}"
 git clone "${MBAPP_REPO}"
 cd "${MBAPP_FOLDER}"
 git reset --hard "${MBAPP_COMMIT}"
 docker build -f mb-app.Dockerfile -t mbapp:latest --build-arg ENV=${ENV} .
 cd ..
}
app-run() {
 docker compose -p mb-platform -f docker-compose-apps.yml up -d --no-recreate mbapp
}
app-logs() {
 if [[ -z "${1}" ]]; then LINES=all; else LINES="${1}"; fi
 docker compose -p mb-platform -f docker-compose-apps.yml logs -f -t --tail "${LINES}" mbapp
}
app-stop() {
 docker compose -p mb-platform -f docker-compose-apps.yml stop mbapp
 docker compose -p mb-platform -f docker-compose-apps.yml rm -f mbapp
}
app-rm() {
 docker rm $(docker ps -a | grep mbapp | awk '{print $1}')
}
app-rmi() {
 docker rmi $(docker images | grep mbapp | awk '{print $3}')
}
app-recreate() {
 app-stop
 app-rm
 app-rmi
 app-build
 app-run
}

### PLATFORM MANIPULATION ###

upgrade() {
 echo "${0}: upgrading v0 -> v1"
 export DOMAINS=(${ALL_DOMAINS})
 CDIR=`pwd`

 # checkout specific module versions
 mkdir -p "${SUBMODULES_FOLDER}"
 cd "${SUBMODULES_FOLDER}"
 SUBDIR=`pwd`

 git clone "${DBUPDATER_REPO}"
 git clone "${MBAPP_REPO}"
 git clone "${WWW_REPO}"
 git clone "${BLAGAJNADB_REPO}"

 cd "${DBUPDATER_FOLDER}"
 git reset --hard "${DBUPDATER_COMMIT}"
 cd "${SUBDIR}/${MBAPP_FOLDER}"
 git reset --hard "${MBAPP_COMMIT}"
 cd "${SUBDIR}/${WWW_FOLDER}"
 git reset --hard "${WWW_COMMIT}"
 cd "${SUBDIR}/${BLAGAJNADB_FOLDER}"
 git reset --hard "${BLAGAJNADB_COMMIT}"
 cd "${CDIR}"

 . "./scripts/letsencrypt/letsencrypt-init.sh"
 write-configs
 letsencrypt-init
 infra-run
 blagajnadb-upgrade "001"
 app-recreate

 # remove submodules
 rm -rf "${SUBMODULES_FOLDER}"
}
downgrade() {
 if [ "${ENV}" = "prod" ]; then
  echo "${0}: refusing to downgrade in production environment"
  exit 1
 fi
 echo "${0}: downgrading v1 -> v0"
 infra-stop
 app-stop
 VOL_PARAM=
 if [ "${1}" = "--vol" ]; then
  VOL_PARAM="--volumes"
 fi
 preserve-images
 set -x
 docker system prune -a ${VOL_PARAM} -f
 set +x
 release-images
 if [ "${1}" = "--vol" ]; then
  rm -rf ./files
 fi
}
reupgrade() {
 if [ "${ENV}" = "prod" ]; then
  echo "${0}: refusing to reupgrade in production environment"
  exit 1
 fi
 downgrade
 upgrade
}
reset() {
 FULL=0
 VOL=0
 if [ "${1}" = "--full" ]; then
  FULL=1
 elif [ "${1}" = "--vol" ]; then
  VOL=1
 fi
 if [ "${2}" = "--full" ]; then
  FULL=1
 elif [ "${2}" = "--vol" ]; then
  VOL=1
 fi
 if [ "${ENV}" = "dev" ] || [ "${ENV}" = "test" ]; then
  if [[ "${FULL}" -eq 1 ]]; then
   rm -f ./env*.sh
  fi
  VOL_PARAM=
  if [[ "${VOL}" -eq 1 ]]; then
   VOL_PARAM="--vol"
  fi
  rm -f ./config/tlsoffloader/tlsoffloader-*.conf
  rm -rf "./files"
  source "./platform_version.sh"
  while [[ "${PLATFORM_VERSION}" -gt 0 ]]; do
   downgrade "${VOL_PARAM}"
   source "./platform_version.sh"
  done
 else
  echo "${0}: refusing to reset ${ENV} environment"
  exit 1
 fi
}

CMD=${1}
shift

case "${CMD}" in
 prepare-env)    prepare-env ${@};;
 write-configs)  write-configs;;
 upgrade)        upgrade;;
 downgrade)      downgrade ${@};;
 reupgrade)      reupgrade;;
 reset)          reset ${@};;
 app)            app ${@};;
 blagajnadb)     blagajnadb ${@};;
 mailserver)     mailserver ${@};;
 infra)          infra ${@};;
 *)
  echo
  echo "usage: ${0} {command} [parameters]"
  echo
  echo "COMMANDS:"
  echo
  echo " ---------------------------------------------------------------------------------------------"
  echo "  prepare-env [param]    | prepares [param] environment, where [param] is dev|test|stage|prod"
  echo "  write-configs          | writes configuration files based on values in env-[ENV].sh script"
  echo " ---------------------------------------------------------------------------------------------"
  echo "  upgrade                | upgrades the platform to the next version"
  echo "  downgrade [--vol]      | downgrades the platform to the previous version [removes volumes]"
  echo "  reupgrade              | best effort to downgrade platform version, then upgrade again"
  echo "  reset [--full] [--vol] | resets the environment - development or test only!"
  echo " ---------------------------------------------------------------------------------------------"
  echo "  infra [param]          | manipulates the infrastructure containers"
  echo " ---------------------------------------------------------------------------------------------"
  echo "  mailserver [param]     | used for setting up the mailserver"
  echo "  blagajnadb [param]     | used for upgrading or downgrading blagajnadb"
  echo "  app [param]            | manipulates the mbapp container"
  echo " ---------------------------------------------------------------------------------------------"
  echo
esac