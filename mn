#!/bin/bash

if [ ! -f ./env ]; then
 envsubst < "./env.template" > "./env"
 echo "env file created; edit it to configure the platform"
 exit 0
fi

PREFIX=mn
API_FOLDER=api
BLOG_FOLDER=blog
NAKEDDIARIES_FOLDER=nakeddiaries
WWW_FOLDER=www

export API_CONTAINER=${PREFIX}-${API_FOLDER}
export BLOG_CONTAINER=${PREFIX}-${BLOG_FOLDER}
export NAKEDDIARIES_CONTAINER=${PREFIX}-${NAKEDDIARIES_FOLDER}
export WWW_CONTAINER=${PREFIX}-${WWW_FOLDER}

. ./env

mkdir -p files/config
mkdir -p files/postgres

# get DNS credentials
cp "${DNS_CRED_FULL_PATH}" ./files/config/
export DNS_CREDENTIALS=./files/config/$(basename "${DNS_CRED_FULL_PATH}")

# bring old platform down; in the future this should be done with minimum downtime
docker compose -p mb-platform -f docker-compose.yml down

# setup configs and certs
envsubst '${APP_SERVER_NAME},${WEB_SERVER_NAME},${API_CONTAINER},${BLOG_CONTAINER},${NAKEDDIARIES_CONTAINER},${WWW_CONTAINER}' \
         < "./containers/nginx/tlsoffloader.conf" > "./files/config/tlsoffloader.conf"
export DOMAINS=(${ALL_DOMAINS})
# this safely runs or skips certbot depending on ${ENV}
. "./containers/certbot/letsencrypt-init.sh"
letsencrypt-init

# at the moment, just clone everything, in the future enable checking out individually
cd containers
rm -rf "${API_FOLDER}" "${BLOG_FOLDER}" "${WWW_FOLDER}" "${NAKEDDIARIES_FOLDER}"
git clone git@github.com:ReasonSharp/male-niti-api.git "${API_FOLDER}"
git clone git@github.com:ReasonSharp/male-niti-blog.git "${BLOG_FOLDER}"
git clone git@github.com:ReasonSharp/male-niti-blog.git "${NAKEDDIARIES_FOLDER}"
git clone git@github.com:ReasonSharp/male-niti-web.git "${WWW_FOLDER}"

cd "${API_FOLDER}"
docker build . -t ${API_CONTAINER}
cd ..
cd "${BLOG_FOLDER}"
docker build --build-arg ENV=prod --build-arg PROJECT_NAME="Male Niti Blog" . -t ${BLOG_CONTAINER}
cd ..
cd "${NAKEDDIARIES_FOLDER}"
docker build --build-arg ENV=prod --build-arg PROJECT_NAME="Naked Diaries" . -t ${NAKEDDIARIES_CONTAINER}
cd ..
cd "${WWW_FOLDER}"
docker build . -t ${WWW_CONTAINER}
cd ../..

docker compose -p mb-platform -f docker-compose.yml up -d

# cleanup
rm -rf ./containers/"${API_FOLDER}" ./containers/"${BLOG_FOLDER}" ./containers/"${NAKEDDIARIES_FOLDER}" ./containers/"${WWW_FOLDER}"
docker system prune -a -f

exit 0

export NGINX_VERSION=1.23.3
export CERTBOT_VERSION=v2.6.0
export NODE_VERSION=20.7.0-alpine3.17

## Submodules
SUBMODULES_FOLDER="./subs"

MODS=("WWW" "API")

declare -A MODDATA

MODDATA[WWW,REPO]="git@github.com:ReasonSharp/male-niti-web.git"
MODDATA[WWW,COMMIT]="147591449a990574e3f62023650a33bbc51d4f1b"
MODDATA[WWW,FOLDER]="male-niti-web"
MODDATA[WWW,BRANCH]="main"

MODDATA[API,REPO]="git@github.com:ReasonSharp/male-niti-api.git"
MODDATA[API,COMMIT]="da39fa6c1933dbdf9a44645417f9138e0142761e"
MODDATA[API,FOLDER]="male-niti-api"
MODDATA[API,BRANCH]="main"

verify-env() {
 [ -z "${1}" ] || [ ! "${1}" = "dev" ] && [ ! "${1}" = "test" ] && [ ! "${1}" = "stage" ] && [ ! "${1}" = "prod" ]
}
fn-exists() {
 declare -F "${1}" > /dev/null
}
rm-container() {
 if [ $# -ne 0 ]; then
  CONTAINER="${1}"
  if docker ps -a --format '{{.Names}}' | grep -q "${CONTAINER}"; then
   docker rm ${CONTAINER}
  fi
 fi
}
rm-image() {
 if [ $# -ne 0 ]; then 
  IMAGE="${1}"
  IMAGE_EXISTS=$(docker images -q "${IMAGE}" 2>/dev/null)
  if [ -n "${IMAGE_EXISTS}" ]; then
   docker rmi ${IMAGE}
  fi
 fi
}

unset ENV
export MSYS_NO_PATHCONV=1

[[ -f "./env.sh"      ]]                       && source "./env.sh"
[[ -z ${ENV} ]] && [ "${1}" != "prepare-env" ] && echo "${0}: missing or invalid env.sh; run: '${0} prepare-env { dev | test | stage | prod }'" && exit 1
[[ -f "./env-${ENV}.sh" ]]                     && source "./env-${ENV}.sh"

prepare-env() {
 if verify-env "${1}"; then
  echo "usage: '${0} prepare-env { dev | test | stage | prod }"
  exit 1
 fi
 envsubst < "./env.template" > "./env-${1}.sh"
 printf "%s\n" "#!/bin/bash" "" "export ENV=${1}" > "./env.sh"
 echo "${0}: check file './env-${1}.sh', then run '${0} write-configs'"
}
write-configs() {
 echo     "${0}: configuring infrastructure"
 mkdir -p "./files/config"
 cp       "./config/certbot/${DNS_CREDENTIALS}.json" "./files/config/${DNS_CREDENTIALS}.json"
 envsubst '${APP_SERVER_NAME},${WEB_SERVER_NAME}'  < "./config/tlsoffloader/tlsoffloader.conf" > "./files/config/tlsoffloader.conf"

 echo     "${0}: configuring API"
 echo     "MNAPI_OUTDIR=${MNAPI_OUTDIR}"                                                       > "${SUBMODULES_FOLDER}/${MODDATA["API,FOLDER"]}/.env"
}



### CONTAINER MANIPULATION ###

infra() {
 if fn-exists infra-"${1}"; then
  infra-"${1}" "${2}"
 else
  echo
  echo "usage: ${0} infra [param]"
  echo
  echo "PARAMS:"
  echo
  echo " --------------------------------------------------------------------------------------------------"
  echo "  run                      | creates and runs infrastructure containers"
  echo "  logs [LINES] [CONTAINER] | shows last [LINES] lines of [CONTAINER]'s logs, or all by default"
  echo "  stop                     | stops and removes infrastructure containers"
  echo "  recreate                 | stops and removes infrastructure containers, then runs them anew"
  echo " --------------------------------------------------------------------------------------------------"
  echo
 fi
}
infra-run() {
 docker compose -p mb-platform -f docker-compose-infra-v2.yml up -d
}
infra-logs() {
 if [[ -z "${1}" ]]; then LINES=all; else LINES="${1}"; fi
 if [[ ! -z "${2}" ]]; then CONTAINER="${2}"; fi
 docker compose -p mb-platform -f docker-compose-infra-v2.yml logs -f -t --tail "${LINES}" ${CONTAINER}
}
infra-stop() {
 docker compose -p mb-platform -f docker-compose-infra-v2.yml down
}
infra-recreate() {
 infra-stop
 infra-run
}

api() {
 if fn-exists api-"${1}"; then
  api-"${1}" "${2}"
 else
  echo
  echo "usage: ${0} api [param]"
  echo
  echo "PARAMS:"
  echo
  echo " --------------------------------------------------------------------------------------------------"
  echo "  build           | builds the api"
  echo "  run             | creates and runs the mnapi container"
  echo "  logs [LINES]    | shows last [LINES] lines of container's logs, or all by default"
  echo "  stop            | stops and removes the container"
  echo "  rm              | removes the api container"
  echo "  rmi             | removes the api image"
  echo "  recreate        | stops and removes the container, then runs it anew"
  echo " --------------------------------------------------------------------------------------------------"
  echo
 fi
}
api-build() {
 CDIR=`pwd`
 cd "${SUBMODULES_FOLDER}/${MODDATA["API,FOLDER"]}"
 docker build -t mnapi:latest --build-arg ENV=${ENV} .
 cd "${CDIR}"
}
api-run() {
 docker compose -p mb-platform -f docker-compose-infra-v2.yml up -d --no-recreate mnapi
}
api-logs() {
 if [[ -z "${1}" ]]; then LINES=all; else LINES="${1}"; fi
 docker compose -p mb-platform -f docker-compose-infra-v2.yml logs -f -t --tail "${LINES}" mnapi
}
api-stop() {
 docker compose -p mb-platform -f docker-compose-infra-v2.yml stop mnapi
 docker compose -p mb-platform -f docker-compose-infra-v2.yml rm -f mnapi
}
api-rm() {
 rm-container mnapi
}
api-rmi() {
 rm-image mnapi
}
api-recreate() {
 api-stop
 api-rm
 api-rmi
 api-build
 api-run
}

www() {
 if fn-exists www-"${1}"; then
  www-"${1}" "${2}"
 else
  echo
  echo "usage: ${0} www [param]"
  echo
  echo "PARAMS:"
  echo
  echo " --------------------------------------------------------------------------------------------------"
  echo "  build           | builds the www"
  echo "  rmi             | removes the www image"
  echo "  recreate        | removes the image, then builds it anew"
  echo " --------------------------------------------------------------------------------------------------"
  echo
 fi
}
www-build() {
 CDIR=`pwd`
 cd "${SUBMODULES_FOLDER}/${MODDATA["WWW,FOLDER"]}"
 docker build -t mnapi:latest --build-arg ENV=${ENV} .
 cd "${CDIR}"
 docker run --rm -v "./files/www:/www:rw" mnapi:latest //bin/sh -c "cp -r /usr/share/nginx/html /www"
}
www-rmi() {
 rm-image mnapi
}
www-recreate() {
 www-rmi
 www-build
}

### PLATFORM MANIPULATION ###

up() {
 if [ -d "${SUBMODULES_FOLDER}" ]; then
  rm -rf "${SUBMODULES_FOLDER}"
 fi
 export DOMAINS=(${ALL_DOMAINS})
 CDIR=`pwd`

 mkdir -p "${SUBMODULES_FOLDER}"
 cd "${SUBMODULES_FOLDER}"
 SUBDIR=`pwd`

 # clone specific submodule versions
 for MOD in "${MODS[@]}"; do
  echo $MOD
  REPO="${MODDATA["${MOD},REPO"]}"
  COMMIT="${MODDATA["${MOD},COMMIT"]}"
  FOLDER="${MODDATA["${MOD},FOLDER"]}"
  git clone "${REPO}"
  cd "${FOLDER}"
  git reset --hard "${COMMIT}"
  cd "${SUBDIR}"
 done

 cd "${CDIR}"

 . "./scripts/letsencrypt/letsencrypt-init.sh"
 write-configs
 letsencrypt-init
 api-recreate
 www-build
 infra-run

 # remove submodules
 rm -rf "${SUBMODULES_FOLDER}"
}
down() {
 FULL=0
 VOL=0
 if [ "${1}" = "--full" ]; then
  FULL=1
 elif [ "${1}" = "--vol" ]; then
  VOL=1
 fi
 if [ "${2}" = "--full" ]; then
  FULL=1
 elif [ "${2}" = "--vol" ]; then
  VOL=1
 fi
 if [ "${ENV}" = "dev" ] || [ "${ENV}" = "test" ]; then
  if [[ "${FULL}" -eq 1 ]]; then
   rm -f ./env*.sh
  fi
  infra-stop
  VOL_PARAM=
  if [[ "${VOL}" -eq 1 ]]; then
   VOL_PARAM="--volumes"
  fi
  rm -f ./config/tlsoffloader/tlsoffloader-*.conf
  preserve-images
  docker system prune -a ${VOL_PARAM} -f
  release-images
  if [[ "${VOL}" -eq 1 ]]; then
   rm -rf ./files
  fi
 else
  echo "${0}: refusing to reset ${ENV} environment"
  exit 1
 fi
}
upgrade() {
 echo "${0}: not implemented"
 exit 1
 #echo "${0}: upgrading v1 -> v2"
 #write-configs
 #api-recreate
 #infra-run
}
reset() {
 down ${@}
 up
}

CMD=${1}
shift

case "${CMD}" in
 prepare-env)    prepare-env ${@};;
 write-configs)  write-configs;;
 upgrade)        upgrade;;
 reset)          reset ${@};;
 up)             up;;
 down)           down ${@};;
 api)            api ${@};;
 infra)          infra ${@};;
 www)            www ${@};;
 *)
  echo
  echo "usage: ${0} {command} [parameters]"
  echo
  echo "COMMANDS:"
  echo
  echo " ---------------------------------------------------------------------------------------------"
  echo "  prepare-env [param]    | prepares [param] environment, where [param] is dev|test|stage|prod"
  echo "  write-configs          | writes configuration files based on values in env-[ENV].sh script"
  echo " ---------------------------------------------------------------------------------------------"
  echo "  upgrade                | upgrades the platform to the current version; previous version"
  echo "                         | needs to be running, this is for upgrading prod"
  echo "  down [--full] [--vol]  | resets the environment - development or test only!"
  echo "  up                     | brings the environment up from scratch, doesn't run in prod, stage"
  echo "  reset [--full] [--vol] | brings the environment down, then back up"
  echo " ---------------------------------------------------------------------------------------------"
  echo "  infra [param]          | manipulates the infrastructure containers"
  echo " ---------------------------------------------------------------------------------------------"
  echo "  api [param]            | manipulates the mnapi container"
  echo "  www [param]            | manipulates the website container"
  echo " ---------------------------------------------------------------------------------------------"
  echo
esac
