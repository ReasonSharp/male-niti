#!/bin/bash

export NGINX_VERSION=1.23.3
export CERTBOT_VERSION=v2.6.0
export MARIADB_VERSION=10.9.3
export NODE_VERSION=20.7.0-alpine3.17
export POSTGRES_VERSION=16.0-bookworm

## Submodules
SUBMODULES_FOLDER="./subs"

# DBUpdater
export DBUPDATER_COMMIT="1278320"
export DBUPDATER_REPO="git@github.com:maleniti/dbupdater.git"
export DBUPDATER_FOLDER="dbupdater"
export DBUPDATER_BRANCH=master

# BlagajnaDB
export BLAGAJNADB_COMMIT=d2c1f32
export BLAGAJNADB_REPO="git@github.com:ReasonSharp/malablagajna.db.git"
export BLAGAJNADB_FOLDER="malablagajna.db"
export BLAGAJNADB_BRANCH=main

verify-env() {
 [ -z "${1}" ] || [ ! "${1}" = "dev" ] && [ ! "${1}" = "test" ] && [ ! "${1}" = "stage" ] && [ ! "${1}" = "prod" ]
}
fn-exists() {
 declare -F "${1}" > /dev/null
}
rm-container() {
 if [ $# -ne 0 ]; then
  CONTAINER="${1}"
  if docker ps -a --format '{{.Names}}' | grep -q "${CONTAINER}"; then
   docker rm ${CONTAINER}
  fi
 fi
}
rm-image() {
 if [ $# -ne 0 ]; then 
  IMAGE="${1}"
  IMAGE_EXISTS=$(docker images -q "${IMAGE}" 2>/dev/null)
  if [ -n "${IMAGE_EXISTS}" ]; then
   docker rmi ${IMAGE}
  fi
 fi
}

unset ENV
export MSYS_NO_PATHCONV=1

[[ -f "./env.sh"      ]]                       && source "./env.sh"
[[ -z ${ENV} ]] && [ "${1}" != "prepare-env" ] && echo "${0}: missing or invalid env.sh; run: '${0} prepare-env { dev | test | stage | prod }'" && exit 1
[[ -f "./env-${ENV}.sh" ]]                     && source "./env-${ENV}.sh"

prepare-env() {
 if verify-env "${1}"; then
  echo "usage: '${0} prepare-env { dev | test | stage | prod }"
  exit 1
 fi
 envsubst < "./env.template" > "./env-${1}.sh"
 printf "%s\n" "#!/bin/bash" "" "export ENV=${1}" > "./env.sh"
 echo "${0}: check file './env-${1}.sh', then run '${0} write-configs'"
}
write-configs() {
 mkdir -p "./files/blagajnadb/mariadb"
 mkdir -p "./files/blagajnadb/data"
 mkdir -p "./files/config"
 cp       "./config/blagajnadb/my.cnf"               "./files/blagajnadb/mariadb/my.cnf"
 cp       "./config/certbot/${DNS_CREDENTIALS}.json" "./files/config/${DNS_CREDENTIALS}.json"
 chmod    0444                                       "./files/blagajnadb/mariadb/my.cnf"
 echo     "${BLAGAJNADB_ROOT_PASS}"                                                            > "./files/config/mysql-root-pass.txt"
 echo     "${USERDB_PASS}"                                                                     > "./files/config/postgre-pass.txt"
 envsubst '${APP_SERVER_NAME},${WEB_SERVER_NAME}'  < "./config/tlsoffloader/tlsoffloader.conf" > "./files/config/tlsoffloader.conf"
 echo     "MNAPI_OUTDIR=${MNAPI_OUTDIR}"                                                       > "./sources/mn-api/.env"
 envsubst '${NODE_VERSION}'                        < "./sources/mn-api.sample.Dockerfile"      > "./sources/mn-api.Dockerfile"
}

preserve-image() {
 if [ "${1}" = "img_certbot" ]; then
  if [ "${ENV}" = "prod" ]; then
   certbot-run
  fi
 else
  docker run -d --name ${1} ${2} //bin/sh -c "while true; do sleep 1; done"
 fi
}
preserve-images() {
 preserve-image img_nginx nginx:${NGINX_VERSION}
 preserve-image img_certbot certbot/dns-google:${CERTBOT_VERSION}
 preserve-image img_node node:${NODE_VERSION}
 preserve-image img_mariadb mariadb:${MARIADB_VERSION}
 preserve-image img_postgres postgres:${POSTGRES_VERSION}
}
release-images() {
 docker stop $(docker ps --format '{{.Names}}' | grep img_)
 docker rm $(docker ps -a --format '{{.Names}}' | grep img_)
}

### CONTAINER MANIPULATION ###

blagajnadb() {
 if fn-exists blagajnadb-"${1}"; then
  blagajnadb-"${1}" "${2}"
 else
  echo
  echo "usage: ${0} blagajnadb [param]"
  echo
  echo "PARAMS:"
  echo
  echo " --------------------------------------------------------------------------------------------------"
  echo "  upgrade [VER]   | runs the new upgrade scripts to upgrade the database to [VER] (max by default)"
  echo "  downgrade [VER] | runs the downgrade script to downgrade the database to [VER] (default: cur-1)"
  echo "  login           | logs into the database on the cli"
  echo " --------------------------------------------------------------------------------------------------"
  echo
 fi
}
blagajnadb-login() {
 DB_NAME=`docker ps --format "{{.Names}}" | grep blagajnadb`
 docker exec -it ${DB_NAME} mysql -u root -p"${DB_ROOT_PASS}" malablagajna
}
blagajnadb-upgrade() {
 if [[ -z "${1}" ]]; then UPGRADE=--full; else UPGRADE="--ver ${1}"; fi
 docker run --rm -v `pwd`/sources/blagajnadb:/blagajnadb:ro --network mb-platform_mb-platform $(docker build -f scripts/dbupdater.Dockerfile -q ./scripts) \
  dbupgrade /blagajnadb --demo ${UPGRADE} -h blagajnadb --port=3306 -u root -p"${BLAGAJNADB_ROOT_PASS}" malablagajna
}
blagajnadb-downgrade() {
 if [[ -z "${1}" ]]; then unset DOWNGRADE; else DOWNGRADE="--ver ${1}"; fi
 docker run --rm -v `pwd`/sources/blagajnadb:/blagajnadb:ro --network mb-platform_mb-platform $(docker build -f scripts/dbupdater.Dockerfile -q ./scripts) \
  dbdowngrade /blagajnadb ${DOWNGRADE} -h blagajnadb --port=3306 -u root -p"${BLAGAJNADB_ROOT_PASS}" malablagajna
}

userdb() {
 if fn-exists userdb-"${1}"; then
  userdb-"${1}" "${2}"
 else
  echo
  echo "usage: ${0} userdb [param]"
  echo
  echo "PARAMS:"
  echo
  echo " --------------------------------------------------------------------------------------------------"
  echo "  upgrade [VER]   | runs the new upgrade scripts to upgrade the database to [VER] (max by default)"
  echo "  downgrade [VER] | runs the downgrade script to downgrade the database to [VER] (default: cur-1)"
  echo "  login           | logs into the database on the cli"
  echo "  rmvol           | removes the data volume associated with this container"
  echo " --------------------------------------------------------------------------------------------------"
  echo
 fi
}
userdb-login() {
 DB_NAME=`docker ps --format "{{.Names}}" | grep userdb`
 docker exec -it ${DB_NAME} psql "dbname=users host=localhost user=postgres password=${USERDB_PASS} port=5432"
}
userdb-rmvol() {
 rm -rf ./files/userdb/data
}
userdb-upgrade() {
 # if [[ -z "${1}" ]]; then UPGRADE=--full; else UPGRADE="--ver ${1}"; fi
 # docker run --rm -v `pwd`/sources/userdb:/userdb:ro --network mb-platform_mb-platform $(docker build -f scripts/dbupdater.Dockerfile -q ./scripts) \
 #  dbupgrade /userdb --demo ${UPGRADE} -h userdb --port=3306 -u root -p"${BLAGAJNADB_ROOT_PASS}" malablagajna
 DB_NAME=`docker ps --format "{{.Names}}" | grep userdb`
 docker exec -it ${DB_NAME} psql  "dbname=users host=localhost user=postgres password=${USERDB_PASS} port=5432"
}
userdb-downgrade() {
 if [[ -z "${1}" ]]; then unset DOWNGRADE; else DOWNGRADE="--ver ${1}"; fi
 docker run --rm -v `pwd`/sources/userdb:/userdb:ro --network mb-platform_mb-platform $(docker build -f scripts/dbupdater.Dockerfile -q ./scripts) \
  dbdowngrade /userdb ${DOWNGRADE} -h userdb --port=3306 -u root -p"${BLAGAJNADB_ROOT_PASS}" malablagajna
}

infra() {
 if fn-exists infra-"${1}"; then
  infra-"${1}" "${2}"
 else
  echo
  echo "usage: ${0} infra [param]"
  echo
  echo "PARAMS:"
  echo
  echo " --------------------------------------------------------------------------------------------------"
  echo "  run                      | creates and runs infrastructure containers"
  echo "  logs [LINES] [CONTAINER] | shows last [LINES] lines of [CONTAINER]'s logs, or all by default"
  echo "  stop                     | stops and removes infrastructure containers"
  echo "  recreate                 | stops and removes infrastructure containers, then runs them anew"
  echo " --------------------------------------------------------------------------------------------------"
  echo
 fi
}
infra-run() {
 docker compose -p mb-platform -f docker-compose-infra-v2.yml up -d
}
infra-logs() {
 if [[ -z "${1}" ]]; then LINES=all; else LINES="${1}"; fi
 if [[ ! -z "${2}" ]]; then CONTAINER="${2}"; fi
 docker compose -p mb-platform -f docker-compose-infra-v2.yml logs -f -t --tail "${LINES}" ${CONTAINER}
}
infra-stop() {
 docker compose -p mb-platform -f docker-compose-infra-v2.yml down
}
infra-recreate() {
 infra-stop
 infra-run
}

api() {
 if fn-exists api-"${1}"; then
  api-"${1}" "${2}"
 else
  echo
  echo "usage: ${0} api [param]"
  echo
  echo "PARAMS:"
  echo
  echo " --------------------------------------------------------------------------------------------------"
  echo "  build           | builds the api"
  echo "  run             | creates and runs the mnapi container"
  echo "  logs [LINES]    | shows last [LINES] lines of container's logs, or all by default"
  echo "  stop            | stops and removes the container"
  echo "  rm              | removes the api container"
  echo "  rmi             | removes the api image"
  echo "  recreate        | stops and removes the container, then runs it anew"
  echo " --------------------------------------------------------------------------------------------------"
  echo
 fi
}
api-build() {
 cd sources/
 docker build -f mn-api.Dockerfile -t mnapi:latest --build-arg ENV=${ENV} .
 cd ..
}
api-run() {
 docker compose -p mb-platform -f docker-compose-infra-v2.yml up -d --no-recreate mnapi
}
api-logs() {
 if [[ -z "${1}" ]]; then LINES=all; else LINES="${1}"; fi
 docker compose -p mb-platform -f docker-compose-infra-v2.yml logs -f -t --tail "${LINES}" mnapi
}
api-stop() {
 docker compose -p mb-platform -f docker-compose-infra-v2.yml stop mnapi
 docker compose -p mb-platform -f docker-compose-infra-v2.yml rm -f mnapi
}
api-rm() {
 rm-container mnapi
}
api-rmi() {
 rm-image mnapi
}
api-recreate() {
 api-stop
 api-rm
 api-rmi
 api-build
 api-run
}

### PLATFORM MANIPULATION ###

up() {
 if [ -d "${SUBMODULES_FOLDER}" ]; then
  rm -rf "${SUBMODULES_FOLDER}"
 fi
 export DOMAINS=(${ALL_DOMAINS})
 CDIR=`pwd`

 # clone specific submodule versions
 mkdir -p "${SUBMODULES_FOLDER}"
 cd "${SUBMODULES_FOLDER}"
 SUBDIR=`pwd`

 git clone "${DBUPDATER_REPO}"
 git clone "${BLAGAJNADB_REPO}"

 cd "${SUBDIR}/${DBUPDATER_FOLDER}"
 git reset --hard "${DBUPDATER_COMMIT}"
 cd "${SUBDIR}/${BLAGAJNADB_FOLDER}"
 git reset --hard "${BLAGAJNADB_COMMIT}"
 cd "${CDIR}"

 . "./scripts/letsencrypt/letsencrypt-init.sh"
 write-configs
 letsencrypt-init
 api-recreate
 infra-run
 blagajnadb-upgrade "001"

 # remove submodules
 rm -rf "${SUBMODULES_FOLDER}"
}
down() {
 FULL=0
 VOL=0
 if [ "${1}" = "--full" ]; then
  FULL=1
 elif [ "${1}" = "--vol" ]; then
  VOL=1
 fi
 if [ "${2}" = "--full" ]; then
  FULL=1
 elif [ "${2}" = "--vol" ]; then
  VOL=1
 fi
 if [ "${ENV}" = "dev" ] || [ "${ENV}" = "test" ]; then
  if [[ "${FULL}" -eq 1 ]]; then
   rm -f ./env*.sh
  fi
  infra-stop
  VOL_PARAM=
  if [[ "${VOL}" -eq 1 ]]; then
   VOL_PARAM="--volumes"
  fi
  rm -f ./config/tlsoffloader/tlsoffloader-*.conf
  preserve-images
  docker system prune -a ${VOL_PARAM} -f
  release-images
  if [[ "${VOL}" -eq 1 ]]; then
   rm -rf ./files
  fi
 else
  echo "${0}: refusing to reset ${ENV} environment"
  exit 1
 fi
}
upgrade() {
 echo "${0}: not implemented"
 exit 1
 #echo "${0}: upgrading v1 -> v2"
 #write-configs
 #api-recreate
 #infra-run
}
reset() {
 down ${@}
 up
}

CMD=${1}
shift

case "${CMD}" in
 prepare-env)    prepare-env ${@};;
 write-configs)  write-configs;;
 upgrade)        upgrade;;
 reset)          reset ${@};;
 up)             up;;
 down)           down ${@};;
 api)            api ${@};;
 blagajnadb)     blagajnadb ${@};;
 userdb)         userdb ${@};;
 infra)          infra ${@};;
 *)
  echo
  echo "usage: ${0} {command} [parameters]"
  echo
  echo "COMMANDS:"
  echo
  echo " ---------------------------------------------------------------------------------------------"
  echo "  prepare-env [param]    | prepares [param] environment, where [param] is dev|test|stage|prod"
  echo "  write-configs          | writes configuration files based on values in env-[ENV].sh script"
  echo " ---------------------------------------------------------------------------------------------"
  echo "  upgrade                | upgrades the platform to the current version; previous version"
  echo "                         | needs to be running, this is for upgrading prod"
  echo "  down [--full] [--vol]  | resets the environment - development or test only!"
  echo "  up                     | brings the environment up from scratch, doesn't run in prod, stage"
  echo "  reset [--full] [--vol] | brings the environment down, then back up"
  echo " ---------------------------------------------------------------------------------------------"
  echo "  infra [param]          | manipulates the infrastructure containers"
  echo " ---------------------------------------------------------------------------------------------"
  echo "  blagajnadb [param]     | used for upgrading or downgrading blagajnadb"
  echo "  userdb [paran]         | for upgrading, downgrading, and manipulation of userdb"
  echo "  api [param]            | manipulates the mnapi container"
  echo " ---------------------------------------------------------------------------------------------"
  echo
esac
